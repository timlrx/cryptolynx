{"version":3,"sources":["components/Login.js","components/SigmaVis.js","containers/Console.js","containers/Report.js","Routes.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","Grid","centered","columns","Column","Header","as","textAlign","Segment","Form","size","Input","fluid","icon","iconPosition","placeholder","type","Button","color","onClick","console","log","Message","href","SigmaVis","_this$props","this","props","graphPath","onClickNode","es","renderer","onOverNode","e","data","node","label","style","maxWidth","height","settings","clone","animationsTime","defaultNodeColor","minArrowSize","drawEdgeLabels","path","default","ForceLink_default","randomize","barnesHutOptimize","barnesHutTheta","background","easing","gravity","edgeWeightInfluence","alignNodeSiblings","timeout","outboundAttractionDistribution","initialSize","Component","ETHER_API_PATH","ETHER_API_KEY","XRATE","concat","json2File","graph","file","Blob","JSON","stringify","URL","createObjectURL","gri","min","max","Math","ceil","floor","random","Console","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","storeEdges","result","_this$state","state","edges","newQuery","setState","newEdges","i","item","edge","id","hash","source","from","target","to","value","Number","push","processedEdges","toConsumableArray","reduce","r","o","key","get","assign","numTransactions","round","toString","set","Map","values","oldEdges","updatedEdges","storeNodes","edges2","_this$state2","nodes","newNodes","newNodes2","length","uniqueNodes","uniqBy","nodeColor","oldNodes","updatedNodes","updateGraph","nodes2","onNodeClick","selectedNode","newGraph","filePath","triggerUpdate","onChange","event","address","queryEtherAPI","axios","then","response","catch","error","onSubmit","onExploreNode","bind","assertThisInitialized","_this2","_this$state3","react","width","Icon","name","link","divided","Row","stretched","components_SigmaVis","List","Item","scamOptions","text","coinOptions","Report","Select","options","Group","widths","inline","Image","src","dist","Date","TextArea","Routes","_ref","pdfUrl","pdfJSON","uploadPath","afterUpload","Switch","Route","component","components_Menu","Menu","inverted","backgroundColor","Container","header","Link","position","App","className","src_Routes","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20851862.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\n\nexport default () => (\n  <Grid centered columns={2}>\n    <Grid.Column>\n      <Header as=\"h2\" textAlign=\"center\">\n        Login\n      </Header>\n      <Segment>\n        <Form size=\"large\">\n          <Form.Input\n            fluid\n            icon=\"user\"\n            iconPosition=\"left\"\n            placeholder=\"Email address\"\n          />\n          <Form.Input\n            fluid\n            icon=\"lock\"\n            iconPosition=\"left\"\n            placeholder=\"Password\"\n            type=\"password\"\n          />\n\n          <Button color=\"blue\" fluid size=\"large\" onClick= {() => console.log('hello world')}>\n            Login\n          </Button>\n        </Form>\n      </Segment>\n      <Message>\n        Not registered yet? <a href=\"#\">Sign Up</a>\n      </Message>\n    </Grid.Column>\n  </Grid>\n);\n\n","import React, {Component} from 'react';\nimport { Sigma, SigmaEnableWebGL , RandomizeNodePositions, RelativeSize, LoadJSON, ForceAtlas2, EdgeShapes } from 'react-sigma';\nimport ForceLink from 'react-sigma/lib/ForceLink'\nimport \"../Sigma.css\";\n\nimport { Form, Button, Input, Icon, Grid, Segment } from 'semantic-ui-react'\nimport { uniqBy, groupBy  } from 'lodash';\nimport sample from '../sample.json';\n\nclass SigmaVis extends Component {\n\n  render() {\n    const { graphPath, onClickNode } = this.props\n\n    return (\n          <Sigma renderer=\"canvas\" onClickNode={onClickNode} onOverNode={e => console.log(\"Mouse over node: \" + e.data.node.label)}\n            style={{maxWidth:\"inherit\", height:\"70vh\"}} settings={{clone: true, animationsTime: 5000, defaultNodeColor: \"#3388AA\", minArrowSize:5, drawEdgeLabels: true}}>\n            <LoadJSON path={graphPath}>\n              <RandomizeNodePositions />\n              <EdgeShapes default=\"curvedArrow\"/>\n              <ForceLink\n                randomize=\"locally\"\n                barnesHutOptimize={false}\n                barnesHutTheta={0.5}\n                background\n                easing=\"cubicInOut\"\n                gravity={1}\n                edgeWeightInfluence={0}\n                alignNodeSiblings={false}\n                timeout={1000}\n                outboundAttractionDistribution={false}\n              />\n              <RelativeSize initialSize={15} />\n            </LoadJSON>\n          </Sigma>\n        )\n      }\n    }\n\n    export default SigmaVis;\n","import React, { Component, Fragment } from \"react\";\n\nimport { Form, Button, Input, Icon, Grid, Segment, List, Message } from 'semantic-ui-react'\nimport { uniqBy, groupBy  } from 'lodash';\n\nimport Login from '../components/Login';\nimport SearchBar from '../components/SearchBar';\nimport sample from '../sample.json';\n\nimport SigmaVis from '../components/SigmaVis';\n\nimport axios from 'axios';\n\nconst myGraph = {nodes:[{id:\"n1\", label:\"A\"}, {id:\"n2\", label:\"B\"}, {id:\"n3\", label:\"C\"}], edges:[{id:\"e1\",source:\"n1\",target:\"n2\",label:\"SEES\"}, {id:\"e2\",source:\"n2\",target:\"n3\",label:\"SEES\"}]};\n\nconst ETHER_API_PATH = \"http://api.etherscan.io/api?module=account&action=txlist\"\nconst ETHER_ADDRESS = \"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a\"\nconst ETHER_API_KEY = \"apikey=GRHRXF34HFU56GE75DEMBPIQTNNH3NFMQR\"\nconst ETHER_URL = `${ETHER_API_PATH}&address=${ETHER_ADDRESS}&startblock=0&endblock=99999999&sort=asc&${ETHER_API_KEY}`\nconst XRATE = 1000000000000000000\n\nconst json2File = (graph) => {\n  const file = new Blob([JSON.stringify(graph)], {type : 'application/json'});\n  return URL.createObjectURL(file)\n}\n\nfunction gri(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nclass Console extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: false,\n      data: false,\n      nodes: [],\n      edges: [],\n      graphPath: false,\n      selectedNode: false,\n      newQuery: true,\n      nodes2: [],\n      edges2: [],\n    };\n\n    this.storeEdges = this.storeEdges.bind(this);\n    this.storeNodes = this.storeNodes.bind(this);\n    this.updateGraph = this.updateGraph.bind(this);\n    this.queryEtherAPI = this.queryEtherAPI.bind(this);\n    this.triggerUpdate = this.triggerUpdate.bind(this);\n  }\n\n  storeEdges = (result) => {\n    const { edges, newQuery } = this.state;\n    this.setState({ data: result })\n    const newEdges = [];\n    for (let i in result) {\n      let item = result[i];\n      const edge = {id:item.hash, source: item.from, target: item.to, value: Number(item.value) / XRATE, label: item.value};\n      newEdges.push(edge);\n    }\n\n    const processedEdges = [...newEdges.reduce((r, o) => {\n      const key = o.source + '-' + o.target;\n      const item = r.get(key) || Object.assign({}, o, {\n        value: 0,\n        label: 0,\n        numTransactions: 0\n      });\n      item.value += o.value;\n      item.label = (Math.round(item.value * 1000) / 1000).toString();\n      item.numTransactions += 1;\n      item.id = o.id;\n\n      return r.set(key, item);\n    }, new Map).values()];\n\n    const oldEdges = newQuery\n      ? []\n      : edges;\n\n    const updatedEdges = [\n      ...oldEdges,\n      ...processedEdges\n    ];\n\n    newQuery\n      ? this.setState({ edges: updatedEdges}, this.storeNodes)\n      : this.setState({ edges2: updatedEdges }, this.storeNodes);\n\n  }\n\n  storeNodes = () => {\n    const { nodes, edges, newQuery } = this.state;\n    const newNodes = [];\n    const newNodes2 = [];\n    for (let i = 0; i < edges.length; i++) {\n      newNodes.push({id:edges[i].source, label: edges[i].source });\n      newNodes.push({id:edges[i].target, label: edges[i].source });\n    }\n    const uniqueNodes = uniqBy(newNodes, 'id')\n    for (let i = 0; i < uniqueNodes.length; i++) {\n      const nodeColor = (Math.random() > 0.5) ? \"#5DA5DA\" : \"#B2912F\"\n      newNodes2.push({id:uniqueNodes[i].id, label: uniqueNodes[i].id, color: nodeColor});\n    }\n\n    const oldNodes = newQuery\n      ? []\n      : nodes;\n\n    const updatedNodes = [\n      ...newNodes2,\n      ...oldNodes\n\n    ];\n\n    newQuery\n      ? this.setState({ nodes: updatedNodes }, () => this.updateGraph(updatedNodes, this.state.edges))\n      : this.setState({ nodes2: updatedNodes }, () => this.updateGraph(this.state.nodes2, this.state.edges2));\n  }\n\n  onNodeClick = (e) => {\n    this.setState({ selectedNode: e.data.node.id })\n  }\n\n  updateGraph = ( nodes, edges) => {\n    const newGraph = {nodes:[...nodes], edges:[...edges]};\n    console.log('update graph')\n    console.log(newGraph)\n    const filePath = json2File(newGraph);\n    this.triggerUpdate(filePath)\n  }\n\n  triggerUpdate = (filePath) => {\n    console.log(filePath)\n    this.setState({ graphPath: filePath });\n  }\n\n  onChange = (event) => {\n    this.setState({ address: event.target.value });\n    console.log('change')\n  }\n\n  queryEtherAPI = (address) => {\n    console.log('query API:')\n    console.log(address)\n    axios.get(`${ETHER_API_PATH}&address=${address}&startblock=0&endblock=99999999&sort=asc&${ETHER_API_KEY}`, {\n    }).then(response => response.data)\n      .then(data => this.storeEdges(data.result))\n      .catch(function (error) {\n        console.log(error);\n      })\n  }\n\n  onSubmit = () => {\n    const { address } = this.state;\n    this.queryEtherAPI(address);\n    this.setState({ newQuery: true });\n  }\n\n  onExploreNode = () => {\n    this.queryEtherAPI(this.state.selectedNode);\n    this.setState({ newQuery: false });\n    // this.updateGraph(myGraph.nodes, myGraph.edges);\n  }\n\n  render() {\n    const { graphPath, data, nodes, edges, selectedNode } = this.state\n\n    return (\n      <Fragment>\n        <br></br>\n        <Form onSubmit={this.onSubmit} >\n          <Input\n            style = {{width: '80%'}}\n            icon={<Icon name='search' link onClick={this.onSubmit}/>}\n            placeholder='Enter Address...'\n            onChange={this.onChange} />\n        </Form>\n        <br/>\n        <Grid divided columns='equal'>\n          <Grid.Row stretched>\n            <Grid.Column width={10}>\n              {data && graphPath ?\n                <Segment>\n                  <SigmaVis\n                    nodes = {nodes}\n                    edges = {edges}\n                    graphPath = {graphPath}\n                    onClickNode={e => this.onNodeClick(e)}\n                  />\n                </Segment>\n              : false}\n            </Grid.Column>\n            <Grid.Column width={4}>\n\n              {data && graphPath ?\n                (data && graphPath && selectedNode ?\n                  <div style={{textAlign: 'left'}}>\n                    <b>{selectedNode}</b>\n                    <List>\n                      <List.Item>Risk Score: {gri(10, 90)}</List.Item>\n                      <List.Item>Total Value: {gri(0, 20)}</List.Item>\n                      <List.Item>Degree: {gri(0,50)}</List.Item>\n                      <List.Item>Centrality: {gri(10,100)/100}</List.Item>\n                      <List.Item>Number of transactions in last month: {gri(0,20)}</List.Item>\n                      <List.Item>Number of transactions in last year: {gri(20,100)}</List.Item>\n                    </List>\n\n                    <Button color=\"blue\" fluid size=\"medium\" onClick= {() => this.onExploreNode()}>\n                      Analyse further\n                    </Button>\n                  </div> :\n                \"No node selected\") :\n              false}\n\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Message> Powered by LynxKite. Scam data from Etherscamdb and Etherscan.  </Message>\n        <br></br>\n      </Fragment>\n    );\n  }\n}\n\nexport default Console;\n","import React from 'react';\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Message,\n  Segment,\n  Icon,\n  Image\n} from 'semantic-ui-react';\nimport {DateInput} from 'semantic-ui-calendar-react';\n\nconst scamOptions = [\n  { key: 'a', text: 'ICO', value: 'ico' },\n  { key: 'b', text: 'Phishing', value: 'phishing' },\n  { key: 'c', text: 'Darknet', value: 'darknet' },\n  { key: 'd', text: 'Fake Service', value: 'fake_service' }\n]\n\nconst coinOptions = [\n  { key: 'a', text: 'Bitcoin', value: 'bitcoin' },\n  { key: 'b', text: 'Ethereum', value: 'ethereum' },\n  { key: 'b', text: 'Litecoin', value: 'litecoin' },\n  { key: 'b', text: 'Ripple', value: 'ripple' }\n]\n\nexport default () => (\n  <Grid centered columns={1}>\n    <Grid.Column>\n      <Header as=\"h2\" textAlign=\"center\">\n        Scam Submission Form\n      </Header>\n      <Message color='blue'>\n        <Header as='h3'>Cooperate with authorities to reclaim your money</Header>\n        Help secure the crypto space by reporting malicious actors. CryptoLynx works with exchanges to verify frauds and return the money to the right owners.\n      </Message>\n      <Segment>\n        <Form size=\"large\">\n          <Form.Select\n            fluid\n            label='Select coin / token type'\n            options={coinOptions}\n            placeholder='Coin Type'\n          />\n          <Form.Group widths='equal'>\n            <Form.Input\n              inline\n              width={6}\n              icon=\"user\"\n              label='Your address'\n              iconPosition=\"left\"\n              placeholder=\"Your address\"\n            />\n            <Image src='/verify_button.png'/>\n            <Button width={2} size=\"medium\">\n              Verify\n            </Button>\n          </Form.Group>\n          <Form.Input\n            fluid\n            label=\"Scamer's address\"\n            icon={<Icon name='user' color='red'/>}\n            iconPosition=\"left\"\n            placeholder=\"Scammer's address\"\n          />\n          <Form.Group widths='equal'>\n            <Form.Select\n              fluid label='Scam Type'\n              options={scamOptions}\n              placeholder='Scam Type'\n            />\n\n            <DateInput\n              name=\"date\"\n              label = \"Date of Scam\"\n              placeholder=\"Date\"\n              value={new Date()}\n              iconPosition=\"left\"\n            />\n            <Form.Input fluid label='Amount Scammed' placeholder='Amount' />\n          </Form.Group>\n          <Form.TextArea label='Additional details' placeholder='Tell us more details about the scam...' />\n          <Form.Input icon='upload' placeholder='Upload Supporting Documents' type='file' />\n          <Form.Input fluid label='Email' placeholder='We will verify the email and contact you with the results' />\n\n          <Button color=\"blue\" fluid size=\"large\" onClick= {() => console.log('hello world')}>\n            Submit\n          </Button>\n        </Form>\n      </Segment>\n\n    </Grid.Column>\n  </Grid>\n);\n","import React from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\n\nimport Login from './components/Login';\nimport SearchBar from './components/SearchBar';\nimport Console from './containers/Console';\nimport Report from './containers/Report';\n\nconst Routes = ({ pdfUrl, pdfJSON,  uploadPath, afterUpload }) =>\n  <Switch>\n    {/* <Route path=\"/console\" render={ () =>  <PdfApp inputPdf={ pdfUrl } inputJSON ={ pdfJSON } />} /> */}\n    { /* Finally, catch all unmatched routes */ }\n    <Route path=\"/report/\" component={Report} />\n    <Route path=\"/console/\"  component={Console} />\n    <Route path=\"/login/\" component={Login} />\n    <Route component={Report} />\n  </Switch>;\n\nexport default Routes;\n","import React from 'react';\nimport { Container, Image, Menu } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\nexport default () => (\n  <Menu inverted style={{backgroundColor:'#004165'}} >\n    <Container>\n      <Menu.Item as=\"a\" header>\n        <Image style={{backgroundColor:'#004165'}}\n          size=\"small\"\n          src=\"/crypto2.png\"\n        />\n      </Menu.Item>\n      <Menu.Item as=\"a\" name=\"report\">\n        <Link to=\"/report/\"> <b> Report </b></Link>\n      </Menu.Item>\n      <Menu.Item as=\"a\" name=\"analyse\">\n        <Link to=\"/console/\"> <b> Analyse </b></Link>\n      </Menu.Item>\n\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item as=\"a\" name=\"login\">\n          <Link to=\"/login/\"> <b> Login </b> </Link>\n        </Menu.Item>\n\n        <Menu.Item as=\"a\" name=\"register\">\n          <b> Register </b>\n        </Menu.Item>\n      </Menu.Menu>\n    </Container>\n  </Menu>\n);\n","import React, { Component, Fragment } from \"react\";\nimport { Button } from 'semantic-ui-react'\nimport { Icon, Input } from 'semantic-ui-react'\nimport { Container } from 'semantic-ui-react';\n\nimport { Link, withRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\n\nimport Menu from './components/Menu';\n\nimport \"./App.css\";\n\nconst ETHER_API_PATH = \"http://api.etherscan.io/api?module=account&action=txlist\"\nconst ETHER_ADDRESS = \"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a\"\nconst ETHER_API_KEY = \"apikey=GRHRXF34HFU56GE75DEMBPIQTNNH3NFMQR\"\nconst url = `${ETHER_API_PATH}&address=${ETHER_ADDRESS}&startblock=0&endblock=99999999&sort=asc&${ETHER_API_KEY}`\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Fragment>\n          <Menu />\n        </Fragment>\n        <Routes/>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}