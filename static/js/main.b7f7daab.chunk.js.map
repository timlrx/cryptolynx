{"version":3,"sources":["components/Login.js","components/SigmaVis.js","components/GraphVis.js","containers/Console.js","containers/Report.js","Routes.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","Grid","centered","columns","Column","Header","as","textAlign","Segment","Form","size","Input","fluid","icon","iconPosition","placeholder","type","Button","color","onClick","console","log","Message","href","Component","options","height","layout","hierarchical","edges","arrows","to","enabled","scaleFactor","middle","from","scaling","min","max","label","font","strokeWidth","strokeColor","align","nodes","shape","chosen","node","values","id","selected","hovering","col","amt","usePound","slice","num","parseInt","r","b","g","toString","LightenDarkenColor","physics","solver","interaction","hover","GraphVis","_this$props","this","props","loading","graph","events","react","style","lib_default","ETHER_API_PATH","ETHER_API_KEY","XRATE","concat","Placeholder","_ref","json2File","file","Blob","JSON","stringify","URL","createObjectURL","gri","Math","ceil","floor","random","Console","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","storeEdges","result","_this$state","state","newQuery","setState","data","newEdges","i","item","edge","hash","value","Number","push","processedEdges","toConsumableArray","reduce","o","key","get","assign","numTransactions","round","set","Map","oldEdges","updatedEdges","uniqueEdges","uniqBy","storeNodes","_this$state2","queriedNodes","newNodes","newNodes2","length","title","nodeColor","includes","oldNodes","updatedNodes","uniqueNodes","updateGraph","onNodeClick","e","selectedNode","newGraph","isLoading","filePath","triggerUpdate","graphPath","onChange","event","address","target","toLowerCase","queryTransactionsAPI","axios","then","response","updateQueriedNodes","catch","error","queryTokenName","onSubmit","onExpandNode","bind","assertThisInitialized","downloadJSON","saveData","document","body","appendChild","fileName","json","blob","url","window","download","click","revokeObjectURL","_this2","_this$state3","select","width","Icon","name","link","divided","Row","stretched","components_GraphVis","Console_Placeholder","List","Item","position","bottom","scamOptions","text","coinOptions","Report","Select","Group","widths","inline","Image","src","dist","Date","TextArea","Routes","pdfUrl","pdfJSON","uploadPath","afterUpload","Switch","Route","path","component","components_Menu","Menu","inverted","backgroundColor","Container","header","Link","App","className","src_Routes","withRouter","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7f7daab.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\n\nexport default () => (\n  <Grid centered columns={2}>\n    <Grid.Column>\n      <Header as=\"h2\" textAlign=\"center\">\n        Login\n      </Header>\n      <Segment>\n        <Form size=\"large\">\n          <Form.Input\n            fluid\n            icon=\"user\"\n            iconPosition=\"left\"\n            placeholder=\"Email address\"\n          />\n          <Form.Input\n            fluid\n            icon=\"lock\"\n            iconPosition=\"left\"\n            placeholder=\"Password\"\n            type=\"password\"\n          />\n\n          <Button color=\"blue\" fluid size=\"large\" onClick= {() => console.log('hello world')}>\n            Login\n          </Button>\n        </Form>\n      </Segment>\n      <Message>\n        Not registered yet? <a href=\"#\">Sign Up</a>\n      </Message>\n    </Grid.Column>\n  </Grid>\n);\n\n","import React, {Component} from 'react';\nimport { Sigma, SigmaEnableWebGL , RandomizeNodePositions, RelativeSize, LoadJSON, ForceAtlas2, EdgeShapes } from 'react-sigma';\nimport ForceLink from 'react-sigma/lib/ForceLink'\nimport \"../Sigma.css\";\n\nimport { Form, Button, Input, Icon, Grid, Segment } from 'semantic-ui-react'\n\nclass SigmaVis extends Component {\n\n  render() {\n    const { graphPath, onClickNode } = this.props\n\n    return (\n          <Sigma renderer=\"canvas\" onClickNode={onClickNode} onOverNode={e => console.log(\"Mouse over node: \" + e.data.node.label)}\n            style={{maxWidth:\"inherit\", height:\"70vh\"}} settings={{clone: false, animationsTime: 5000, defaultNodeColor: \"#3388AA\", minArrowSize:5, drawEdgeLabels: true, drawEdges:true}}>\n            <LoadJSON path={graphPath}>\n              <RandomizeNodePositions />\n              <EdgeShapes default=\"curvedArrow\"/>\n              <ForceLink\n                randomize=\"locally\"\n                barnesHutOptimize={false}\n                barnesHutTheta={0.5}\n                background\n                easing=\"cubicInOut\"\n                gravity={1}\n                edgeWeightInfluence={0}\n                alignNodeSiblings={false}\n                timeout={1000}\n                outboundAttractionDistribution={false}\n              />\n              <RelativeSize initialSize={15} />\n            </LoadJSON>\n\n          </Sigma>\n        )\n      }\n    }\n\n    export default SigmaVis;\n","import React, {Component, Fragment} from 'react';\nimport Graph from 'react-graph-vis';\n\nfunction LightenDarkenColor(col, amt) {\n    var usePound = false;\n    if (col[0] === \"#\") {\n        col = col.slice(1);\n        usePound = true;\n    }\n    var num = parseInt(col,16);\n    var r = (num >> 16) + amt;\n    if (r > 255) r = 255;\n    else if  (r < 0) r = 0;\n    var b = ((num >> 8) & 0x00FF) + amt;\n    if (b > 255) b = 255;\n    else if  (b < 0) b = 0;\n    var g = (num & 0x0000FF) + amt;\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst options = {\n    height: '100%',\n    layout: {\n        hierarchical: false\n    },\n    edges: {\n      arrows: {\n        to:     {enabled: true, scaleFactor: 0.2, type:'arrow'},\n        middle: {enabled: false, scaleFactor:1, type:'arrow'},\n        from:   {enabled: false, scaleFactor:1, type:'arrow'}\n      },\n      scaling:{\n        min: 1,\n        max: 5,\n        label: {\n          enabled: false\n        }\n      },\n      font: {\n        color: \"#000000\",\n        strokeWidth: 0, // px\n        strokeColor: '#ffffff',\n        align: 'top'\n      },\n      color: \"#000000\"\n    },\n    nodes: {\n      shape : 'dot',\n      size : 8,\n      chosen: {\n        node: function(values, id, selected, hovering) {values.color = LightenDarkenColor(values.color, -40);}\n      }\n    },\n    physics: {\n      solver: 'forceAtlas2Based'\n    },\n    interaction: {\n      hover:true\n    }\n};\n\n\nclass GraphVis extends Component {\n\n  render() {\n    const { loading, graph, events } = this.props\n\n    return (\n          <Fragment>\n            <div style={{height: '60vh'}}>\n              {loading ? 'Loading...' : ' '}\n              <Graph graph={graph} options={options} events={events}/>\n            </div>\n          </Fragment>\n            )\n      }\n    }\n\nexport default GraphVis;\n","import React, { Component, Fragment } from \"react\";\n\nimport { Form, Button, Input, Icon, Grid, Segment, List, Message } from 'semantic-ui-react'\nimport { uniqBy, groupBy  } from 'lodash';\n\nimport Login from '../components/Login';\nimport SearchBar from '../components/SearchBar';\nimport test_edge3 from '../test_edge3.json';\n\nimport SigmaVis from '../components/SigmaVis';\nimport GraphVis from '../components/GraphVis';\nimport Graph from 'react-graph-vis';\n\nimport axios from 'axios';\n\nconst myGraph = {nodes:[{id:\"n1\", label:\"A\"}, {id:\"n2\", label:\"B\"}, {id:\"n3\", label:\"C\"}], edges:[{id:\"e1\",source:\"n1\",target:\"n2\",label:\"SEES\"}, {id:\"e2\",source:\"n2\",target:\"n3\",label:\"SEES\"}]};\n\n// For SigmaVis use source/target and label, for GraphVis use from/to and title\n\nconst ETHER_API_PATH = \"https://api.etherscan.io/api?module=account&action=txlist\"\nconst ETHER_ADDRESS = \"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a\"\nconst ETHER_API_KEY = \"apikey=GRHRXF34HFU56GE75DEMBPIQTNNH3NFMQR\"\nconst ETHER_URL = `${ETHER_API_PATH}&address=${ETHER_ADDRESS}&startblock=0&endblock=99999999&sort=asc&${ETHER_API_KEY}`\nconst XRATE = 1000000000000000000\n\nconst Placeholder = ({loading}) => (\n  <Fragment>\n    <Segment>\n      {loading ? 'Loading...' : ' '}\n      <div style={{height: '60vh'}}/>\n    </Segment>\n  </Fragment>\n)\n\nconst json2File = (graph) => {\n  const file = new Blob([JSON.stringify(graph)], {type : 'application/json'});\n  return URL.createObjectURL(file)\n}\n\nfunction gri(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nclass Console extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      address: false,\n      data: false,\n      queriedNodes: [],\n      nodes: [],\n      edges: [],\n      graph: false,\n      graphPath: false,\n      selectedNode: false,\n      newQuery: true\n    };\n\n    this.storeEdges = this.storeEdges.bind(this);\n    this.storeNodes = this.storeNodes.bind(this);\n    this.updateGraph = this.updateGraph.bind(this);\n    this.queryTransactionsAPI = this.queryTransactionsAPI.bind(this);\n    this.queryTokenName = this.queryTokenName.bind(this);\n    this.triggerUpdate = this.triggerUpdate.bind(this);\n    this.updateQueriedNodes = this.updateQueriedNodes.bind(this);\n    this.downloadJSON = this.downloadJSON.bind(this)\n  }\n\n  storeEdges = (result) => {\n\n    const { edges, newQuery } = this.state;\n    this.setState({ data: result })\n    const newEdges = [];\n    for (let i in result) {\n      let item = result[i];\n      const edge = {id:item.hash, from: item.from, to: item.to, value: Number(item.value) / XRATE, label: item.value};\n      newEdges.push(edge);\n    }\n\n    const processedEdges = [...newEdges.reduce((r, o) => {\n      const key = o.from + '-' + o.to;\n      const item = r.get(key) || Object.assign({}, o, {\n        value: 0,\n        label: 0,\n        numTransactions: 0\n      });\n      item.value += o.value;\n      item.label = (Math.round(item.value * 1000) / 1000).toString();\n      item.numTransactions += 1;\n      item.id = o.id;\n\n      return r.set(key, item);\n    }, new Map).values()];\n\n\n    const oldEdges = newQuery\n      ? []\n      : edges;\n\n    const updatedEdges = [\n      ...oldEdges,\n      ...processedEdges\n    ];\n\n    const uniqueEdges = uniqBy(updatedEdges, 'id');\n\n    this.setState({ edges: uniqueEdges}, this.storeNodes)\n\n  }\n\n  storeNodes = () => {\n    const { nodes, edges, queriedNodes, newQuery } = this.state;\n    const newNodes = [];\n    const newNodes2 = [];\n    for (let i = 0; i < edges.length; i++) {\n      newNodes.push({id:edges[i].from, title: edges[i].from });\n      newNodes.push({id:edges[i].to, title: edges[i].to });\n    }\n\n    for (let i = 0; i < newNodes.length; i++) {\n      const nodeColor = queriedNodes.includes(newNodes[i].id) ? \"#ff9a02\" : \"#84b3ff\"\n      newNodes2.push({id:newNodes[i].id, title: newNodes[i].id, color: nodeColor});\n    }\n\n    const oldNodes = newQuery\n      ? []\n      : nodes;\n\n    const updatedNodes = [\n      ...newNodes2,\n      ...oldNodes\n    ];\n    const uniqueNodes = uniqBy(updatedNodes, 'id')\n\n    this.setState({ nodes: uniqueNodes }, () => this.updateGraph(uniqueNodes, this.state.edges));\n  }\n\n  onNodeClick = (e) => {\n    const {nodes, edges} = e\n    this.setState({ selectedNode: nodes[0] })\n  }\n\n  updateGraph = ( nodes, edges) => {\n    const newGraph = {nodes:[...nodes], edges:[...edges]};\n    this.setState({\n      graph: newGraph,\n      isLoading: false\n    })\n    console.log('update graph')\n    console.log(newGraph)\n    const filePath = json2File(newGraph);\n    this.triggerUpdate(filePath)\n  }\n\n  triggerUpdate = (filePath) => {\n    this.setState({ graphPath: filePath });\n  }\n\n  onChange = (event) => {\n    this.setState({ address: event.target.value.toLowerCase() });\n  }\n\n  queryTransactionsAPI = (address) => {\n    console.log('query transactions API:')\n    console.log(address)\n    axios.get(`${ETHER_API_PATH}&address=${address}&startblock=0&endblock=99999999&page=1&offset=1000&sort=asc&${ETHER_API_KEY}`, {\n    }).then(response => response.data)\n      .then(data => {\n        this.updateQueriedNodes(address);\n        return data\n      }).then(data => this.storeEdges(data.result)\n       ).catch(error => console.log(error))\n  }\n\n  queryTokenName = (address) => {\n    console.log('query token name API:')\n    console.log(address)\n    axios.get(`${ETHER_API_PATH}&address=${address}&startblock=0&endblock=99999999&page=1&offset=2&sort=asc&${ETHER_API_KEY}`, {\n    }).then(response => response.data)\n      .then(data => data.result[0]['tokenName'])\n      .catch(error => console.log(error))\n  }\n\n\n  updateQueriedNodes = (address) => {\n    this.setState({ queriedNodes: [...this.state.queriedNodes, address] })\n  }\n\n  onSubmit = () => {\n    const { address } = this.state;\n    this.queryTransactionsAPI(address);\n    this.setState({\n      newQuery: true,\n      isLoading: true\n    });\n    // this.setState({ data: test_edge3 })\n    // this.updateGraph(test_edge3.nodes, test_edge3.edges);\n  }\n\n  onExpandNode = () => {\n    this.queryTransactionsAPI(this.state.selectedNode);\n    this.setState({\n      newQuery: false,\n      isLoading: true\n    });\n    // this.updateGraph(myGraph.nodes, myGraph.edges);\n  }\n\n  downloadJSON() {\n    // Creates a temp a element to have a named download\n    const { graph } = this.state;\n    let saveData = (function () {\n      let a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.style = \"display: none\";\n      return function (data, fileName) {\n          let json = JSON.stringify(data),\n          blob = new Blob([json], {type: \"octet/stream\"}),\n          url = window.URL.createObjectURL(blob);\n          a.href = url;\n          a.download = fileName;\n          a.click();\n          window.URL.revokeObjectURL(url);\n      };\n    }());\n\n    let data = graph, fileName = \"graph.json\";\n    saveData(data, fileName);\n  }\n\n  render() {\n    const { isLoading, graphPath, data, nodes, edges, graph, selectedNode } = this.state\n\n    const events = {\n        select: e => this.onNodeClick(e)\n    }\n\n\n    return (\n      <Fragment>\n        <Form onSubmit={this.onSubmit} >\n          <Input\n            style = {{width: '80%'}}\n            loading = {isLoading}\n            icon={<Icon name='search' link onClick={this.onSubmit}/>}\n            placeholder='Enter Address...'\n            onChange={this.onChange} />\n        </Form>\n        <br/>\n        <Grid divided columns='equal'>\n          <Grid.Row stretched>\n            <Grid.Column width={10}>\n              {data && graphPath ?\n                <Segment>\n                  {/* <SigmaVis\n                    nodes = {nodes}\n                    edges = {edges}\n                    graphPath = {graphPath}\n                    onClickNode={e => this.onNodeClick(e)}\n                  /> */}\n                  <GraphVis graph={graph} events={events} loading={isLoading}/>\n                </Segment>\n              : <Placeholder loading={isLoading}/>}\n            </Grid.Column>\n            <Grid.Column width={4}>\n\n              {data && graphPath ?\n                (data && graphPath && selectedNode ?\n                  <div style={{textAlign: 'left'}}>\n                    <b>{selectedNode}</b>\n                    <List>\n                      <List.Item>Risk Score: {gri(10, 90)}</List.Item>\n                      <List.Item>Total Value: {gri(0, 20)}</List.Item>\n                      <List.Item>Degree: {gri(0,50)}</List.Item>\n                      <List.Item>Centrality: {gri(10,100)/100}</List.Item>\n                      <List.Item>Number of transactions in last month: {gri(0,20)}</List.Item>\n                      <List.Item>Number of transactions in last year: {gri(20,100)}</List.Item>\n                    </List>\n\n                    <Button color=\"blue\" fluid size=\"medium\" onClick= {() => this.onExpandNode()}>\n                      Expand Node\n                    </Button>\n                    <br/>\n                    <Button color=\"green\" fluid size=\"medium\">\n                      Explore in LynxKite\n                    </Button>\n                    <Button color=\"blue\" fluid size=\"medium\" onClick= {() => this.downloadJSON()} style={{position: 'absolute', bottom:0}}>\n                      Export graph as Json\n                    </Button>\n                  </div> :\n                <div style={{textAlign: 'left'}}>\n                <b>Select a node to get started</b>\n                <Button color=\"blue\" fluid size=\"medium\" onClick= {() => this.downloadJSON()} style={{position: 'absolute', bottom:0}}>\n                  Export graph as Json\n                </Button>\n                </div>\n            ) :\n              false}\n\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Message> Powered by LynxKite. Scam data from Etherscamdb and Etherscan.  </Message>\n      </Fragment>\n    );\n  }\n}\n\nexport default Console;\n","import React from 'react';\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Message,\n  Segment,\n  Icon,\n  Image\n} from 'semantic-ui-react';\nimport {DateInput} from 'semantic-ui-calendar-react';\n\nconst scamOptions = [\n  { key: 'a', text: 'ICO', value: 'ico' },\n  { key: 'b', text: 'Phishing', value: 'phishing' },\n  { key: 'c', text: 'Darknet', value: 'darknet' },\n  { key: 'd', text: 'Fake Service', value: 'fake_service' }\n]\n\nconst coinOptions = [\n  { key: 'a', text: 'Bitcoin', value: 'bitcoin' },\n  { key: 'b', text: 'Ethereum', value: 'ethereum' },\n  { key: 'b', text: 'Litecoin', value: 'litecoin' },\n  { key: 'b', text: 'Ripple', value: 'ripple' }\n]\n\nexport default () => (\n  <Grid centered columns={1}>\n    <Grid.Column>\n      <Header as=\"h2\" textAlign=\"center\">\n        Scam Submission Form\n      </Header>\n      <Message color='blue'>\n        <Header as='h3'>Cooperate with authorities to reclaim your money</Header>\n        Help secure the crypto space by reporting malicious actors. CryptoLynx works with exchanges to verify frauds and return the money to the right owners.\n      </Message>\n      <Segment>\n        <Form size=\"large\">\n          <Form.Select\n            fluid\n            label='Select coin / token type'\n            options={coinOptions}\n            placeholder='Coin Type'\n          />\n          <Form.Group widths='equal'>\n            <Form.Input\n              inline\n              width={6}\n              icon=\"user\"\n              label='Your address'\n              iconPosition=\"left\"\n              placeholder=\"Your address\"\n            />\n            <Image src='/verify_button.png'/>\n            <Button width={2} size=\"medium\">\n              Verify\n            </Button>\n          </Form.Group>\n          <Form.Input\n            fluid\n            label=\"Scamer's address\"\n            icon={<Icon name='user' color='red'/>}\n            iconPosition=\"left\"\n            placeholder=\"Scammer's address\"\n          />\n          <Form.Group widths='equal'>\n            <Form.Select\n              fluid label='Scam Type'\n              options={scamOptions}\n              placeholder='Scam Type'\n            />\n\n            <DateInput\n              name=\"date\"\n              label = \"Date of Scam\"\n              placeholder=\"Date\"\n              value={new Date()}\n              iconPosition=\"left\"\n            />\n            <Form.Input fluid label='Amount Scammed' placeholder='Amount' />\n          </Form.Group>\n          <Form.TextArea label='Additional details' placeholder='Tell us more details about the scam...' />\n          <Form.Input icon='upload' placeholder='Upload Supporting Documents' type='file' />\n          <Form.Input fluid label='Email' placeholder='We will verify the email and contact you with the results' />\n\n          <Button color=\"blue\" fluid size=\"large\" onClick= {() => console.log('hello world')}>\n            Submit\n          </Button>\n        </Form>\n      </Segment>\n\n    </Grid.Column>\n  </Grid>\n);\n","import React from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\n\nimport Login from './components/Login';\nimport SearchBar from './components/SearchBar';\nimport Console from './containers/Console';\nimport Report from './containers/Report';\n\nconst Routes = ({ pdfUrl, pdfJSON,  uploadPath, afterUpload }) =>\n  <Switch>\n    {/* <Route path=\"/console\" render={ () =>  <PdfApp inputPdf={ pdfUrl } inputJSON ={ pdfJSON } />} /> */}\n    { /* Finally, catch all unmatched routes */ }\n    <Route path=\"/report/\" component={Report} />\n    <Route path=\"/console/\"  component={Console} />\n    <Route path=\"/login/\" component={Login} />\n    <Route component={Report} />\n  </Switch>;\n\nexport default Routes;\n","import React from 'react';\nimport { Container, Image, Menu } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\nexport default () => (\n  <Menu inverted style={{backgroundColor:'#004165'}} >\n    <Container>\n      <Menu.Item header>\n        <Image style={{backgroundColor:'#004165', 'width':'120px'}}\n          src=\"/crypto2.png\"\n        />\n      </Menu.Item>\n      <Menu.Item as=\"a\" name=\"report\">\n        <Link to=\"/report/\"> <b> Report </b></Link>\n      </Menu.Item>\n      <Menu.Item as=\"a\" name=\"analyse\">\n        <Link to=\"/console/\"> <b> Analyse </b></Link>\n      </Menu.Item>\n\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item as=\"a\" name=\"login\">\n          <Link to=\"/login/\"> <b> Login </b> </Link>\n        </Menu.Item>\n\n        <Menu.Item as=\"a\" name=\"register\">\n          <b> Register </b>\n        </Menu.Item>\n      </Menu.Menu>\n    </Container>\n  </Menu>\n);\n","import React, { Component, Fragment } from \"react\";\nimport { Button } from 'semantic-ui-react'\nimport { Icon, Input } from 'semantic-ui-react'\nimport { Container } from 'semantic-ui-react';\n\nimport { Link, withRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\n\nimport Menu from './components/Menu';\n\nimport \"./App.css\";\n\nconst ETHER_API_PATH = \"http://api.etherscan.io/api?module=account&action=txlist\"\nconst ETHER_ADDRESS = \"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a\"\nconst ETHER_API_KEY = \"apikey=GRHRXF34HFU56GE75DEMBPIQTNNH3NFMQR\"\nconst url = `${ETHER_API_PATH}&address=${ETHER_ADDRESS}&startblock=0&endblock=99999999&sort=asc&${ETHER_API_KEY}`\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Fragment>\n          <Menu />\n        </Fragment>\n        <Routes/>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}